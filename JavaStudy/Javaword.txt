■ 開発
・ウォーターフォール開発
　ウォーターフォールモデルは、システム開発の中でも、最もポピュラーな手法。その特徴は、要件定義や、外部設計、内部設計、といった工程を、上流工程から下流工程へ順におこなっていくことにある。これにより、常に計画性を保ち、開発をおこなうことができる。各工程が完了するまでは次の工程に進まないという特徴がある。さらに、前の工程には戻らないという手法になるため、工程ごとに成果物を作ることになる。開発工程が水のように流れて進むことから、ウォーターフォールと呼ばれている。


・アジャイル開発
　ウォーターフォールモデルの弱点を克服するために考案された開発手法の一つが、反復型開発である。その反復型開発からさらに派生した手法が、アジャイルソフトウェア開発。日本語で「素早い」という意味を持つアジャイル。その名の通り、そのスピード感に強みを持つ開発手法。アジャイル開発では要件定義や外部設計、内部設計などの工程を少しずつ反復しておこなう。そのため、ユーザーからの要望に応じたアップデートなどに対応しやすい手法だとされている。その半面、小さな反復を繰り返すという性質上、大規模なシステム開発には向かず、工程の進捗管理も困難である、というデメリットがある。


・マイグレーション
　移行、移転、移住、移動、乗換などの意味を持つ英単語。ITの分野では、ソフトウェアやシステム、データなどを別の環境に移転したり、新しい環境に切り替えたりすることを意味することが多い。


・デグレーション
　デグレードの略。新しいバージョンのソフトウェアの品質が、以前より悪くなること。


・デプロイ
　「配置する」「配備する」「展開する」といった意味の英語の動詞です。日本語の中では、ソフトウェア開発の工程のうち、開発した機能やサービスを利用できる状態にする作業を指す語として用いられています。 
たとえば、ウェブアプリケーションの開発において、作製したプログラムをサーバーにアップロードし、当該のサーバー環境で利用可能にする、という手続きが挙げられます。ただし、必ずしも公開（リリース）作業を指すとは限らず、開発環境からテスト用の環境へアップロードしてテストに使える状態にすることもデプロイといいます。ソフトウェアをインストールする作業もデプロイに該当します。 
FTPはFileファイル Transferトランスファー Protocolプロトコルの略で、読んで字の如くファイル転送の為に使う接続方法。


・コンフリクト
　競合、衝突、対立、葛藤、緊張、紛争などの意味を持つ英単語。ITの分野では、複数の装置やプログラムなどが同じ資源を同時に利用しようとして競合状態になってしまうことを意味する場合が多い。「競合」「衝突」の訳語が当てられることが多い。
競合のこと。複数のプログラムが同じデータを使おうとしている状態。


・環境
　ある装置やソフトウェアにとって、それが導入されるコンピュータのハードウェアの構成や設定、OSなどソフトウェアの構成や設定、および、それら全体の組み合わせのことを環境（動作環境）という。周辺機器やアプリケーションソフトなどをコンピュータに追加する際には、動作可能な機種やOSの種類、必要とする装置やソフトウェアなどが決まっており、これらを適切に組み合わせた環境を用意する必要がある。

　・開発環境（ローカル）
　　ローカル開発環境とは実際のサーバーにアップする前に、サイトの動作や表示確認を手持ちのパソコン内で行うことを意味します。
ローカル開発環境によりインターネット上のサイトに影響を与えることなく、安心してカスタマイズを行うことが可能になります。

　・検証環境（ステージング）
　　システム開発において、「ステージング環境」とは、本番環境に条件を限りなく近づけた「最終テスト用に用いる、本番環境と類似のテスト環境」を指します。

　・本番環境
　　システム開発に関する用語で、システムが製品として実際に稼動している環境のことである。単に「本番」と呼ばれることもある。


・設計書／仕様書
　「仕様書」は完成イメージを明確にした資料であるのに対し、「設計書」は完成するまでの制作工程を明確にした資料。
　仕様書は、こう有るべきという仕様（決め事）を記載する書類です。 設計書は、その仕様を実現する為に、「どのようなシステム構成にするか？」、 「どうやって作るか？」という実現方法を記載した書類です。

　・要件定義
　　システムやソフトウェアの開発において、実装すべき機能や満たすべき性能などを明確にしていく作業のことです。 ユーザ部門から要求を引き出し、システムに実装するべき機能を整理します。 整理した内容をもとに、業務フローや業務シナリオを作成し、ユーザ部門と認識の齟齬がないことを確認します。

　・基本設計書
　　情報システムを作る工程の一つで、情報システム全体を機能単位に分割して、それぞれの機能がどういうものか、どういうことができるものか、機能同士がどうつながるのか決めていく作業です。 基本設計を行うタイミングは、要件定義の後、詳細設計の前になります。
　　ソフトウェアの動きを外から見た際にどういう動きをするのか？(What)を決めたもの

　・詳細設計書
　　基本設計で決められた動きをどうやって実現するか？(How)を決めたもの
　　

・テスト
　・単体テスト（UT）
　　ソフトウェアやシステムのテスト手法の一つで、単一の部品（モジュール）を対象に行うテスト。
プログラムの作成が終わった段階で行うテスト。プログラムを手続きや関数といった個々の機能ごとに分割し、それぞれについて動作検証を行う手法のことを指す。

　・結合テスト（CT／IT）
　　開発中のソフトウェアのテスト手法の一つで、複数のモジュール（部品）を組み合わせて行うテスト。個々のモジュールの単体テスト後に行う。

　・総合テスト（ST）
　　開発したシステム全体について要件を満足していることを検証する。
　　システムテストとは、システム開発会社（ベンダー）側の最終テスト工程である。
システムが本番化されるまでには、発注側の受け入れテスト（運用テストとも言う）が残っているものの、このテストは発注側の確認用のテストであるため、開発側としてはシステムテストが最終テスト工程となる。当然ながら、システムテストが終了したシステムは、「品質に不備はない」と胸を張って言える状態でなけらばならない。すなわち、システムテストの目的は、”システム全体が発注側の要求した機能や性能を満たしていることを検証すること“である。


・エビデンス／証跡
　エビデンスとは、証拠、根拠、証言、痕跡などの意味を持つ英単語。ITの分野では、システム開発などで、最終検証段階においてシステムが発注どおりに動作していることを示す証拠となる書類やデータなどのことをエビデンスということが多い。稼動中の画面を印刷したものや、システムによって生成されたデータファイル、外部の別のシステムが受信したデータなどが用いられることが多い。


・データパッチ
　コンピュータにおいてプログラムの一部分を更新してバグ修正や機能変更を行うためのデータのこと。 「修正プログラム」や「アップデート（プログラム）」などとも呼ばれる。 実際に変更を施す際は「パッチを当てる」、「パッチを適用する」と言う。


・Access
　機器やソフトウェア、システム、情報などを利用（操作、取得、閲覧、読み書きなど）可能な状態にすることをアクセスという。特に、コンピュータのストレージ装置（外部記憶装置）内に保存されたデータを読み出したり、上書きや削除などを行うことをアクセスということが多い。
また、通信回線やネットワークを介して別のコンピュータや機器を操作可能な状態にしたり、管理下にある情報などを取得、閲覧、編集などできるようにすることをアクセスという。


・マクロ
　連する複数の操作や手順、命令などを一つにまとめ、必要に応じて呼び出すことができるようにする機能のこと。

　・VBA
　　マクロは操作を自動化するための機能で、VBAはマクロの処理を動かすプログラムです。
　　たとえば、「ブック1のデータをコピーして、ブック2にデータを張り付けて保存する機能」のような、機能がマクロです。このマクロを動かすプログラムがVBAで、VBAには次のようなコードが書いてあります。


・GAS（Google Apps Script）
　Googleが提供しているプログラミング環境です。GAS（ガス）という略称でも呼ばれています。
　JavaScriptをベースにしている。


・API
　あるコンピュータプログラム（ソフトウェア）の機能や管理するデータなどを、外部の他のプログラムから呼び出して利用するための手順やデータ形式などを定めた規約のこと。

　・WEB API
　　API提供者とAPI利用者とのやりとりをHTTP／HTTPSベースで実現するAPIだ。「Web」ではないAPIは通常、API利用者が用いるプログラミング言語と同じ言語で提供されることが多い。一方Web APIはHTTP／HTTPSベースのAPIであるため、異なるプログラミング言語で開発されたアプリケーション間を連携させることが可能だ。さらにWebブラウザでも利用できるなど、他のAPIよりも汎用（はんよう）的に利用できる。

　・REST API
　　REpresentational State Transferの略。 RESTの世界では、ネットワーク上のコンテンツ(リソース)を一意なURLで表すのが基本。 各リソース（URL）に対してGET,POST,PUT,DELETEでリクエストを送信しレスポンスをXMLやjsonなどで受け取る形式（レスポンスのフォーマット形式は指定されていない）。 RESTはURLがリソースに対応づけられるためURLは名詞的になることが多い。
　　不特定多数を対象にした、入力パラメータが少ない情報配信や検索サービス等での利用に向いている。

　・SOAP
　　SimpleObject Access Protocolの略。 リクエストおよびレスポンスともにXMLフォーマットのデータで行う形式。 SOAPのURLは操作と対応づけられるため、URLの命名が動詞的になることが多い。
　　複雑な入力を必要としたり、入出力に対してチェックを必要とするようなサービス等での利用に向いている。

・Ajax
　　「Asynchronous JavaScript + XML」の略
Asynchronousとは、非同時性の、非同期の
つまり、「JavaScriptとXMLを使って非同期にサーバとの間の通信を行うこと。」

　・XML
　　「Extensible Markup Language」の略で、日本語では「拡張可能なマークアップ言語」と訳されます。特定の企業が提供している技術ではなく、インターネット上で使用される各種技術の標準化推進団体である、W3C（World Wide Web Consortium）によるオープンな規格です。
　　拡張できるマークアップ言語
　　データのやり取りに向いている

　・JSON
　　JSONとはJavaScript Object Notationの略で、XMLなどと同様のテキストベースのデータフォーマットです。その名前の由来の通りJSONはJavaScriptのオブジェクト表記構文のサブセットとなっており、XMLと比べると簡潔に構造化されたデータを記述することができるため、記述が容易で人間が理解しやすいデータフォーマットと言えます。
　　JavaScriptとの親和性の高さから現在ではAjaxでのデータ交換フォーマットとして広く利用されるようになりました。

　・ステータスコード
　　HTTPステータスコード（HTTP Status Code）とも呼ばれる、HTMLを表示する前にブラウザが受信する3桁の番号です。番号は100-510までの間で割り振られていて、
各数値にはそれぞれ意味が付与されています。この3桁の数値を「HTMLを受信する前に」受信することで、ブラウザは正しい処理ができるようになります。

　・クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
　　ブラウザがオリジン(HTMLを読み込んだサーバのこと)以外のサーバからデータを取得する仕組みです。各社のブラウザには、クロスドメイン通信を拒否する仕組みが実装されています。これは、クロスサイトスクリプティングを防止するためです。


・バリデーション
　データのバリデーションといった場合、記述・入力されたデータが、あらかじめ規定された条件や仕様、形式などに適合しているかどうかを検証・確認することを表す。形式的な妥当性の検証であり、意味論的に適切な内容かどうかは判断しない。
プログラムのバリデーションといった場合、記述に用いた言語の文法や、そのプログラムに要求される仕様（書の記述）に則って正しく記述されているかを検証することを表す。


・データ連携
　データ連携とは、アプリケーションやシステム、格納先がそれぞれ異なるデータを、垣根を超えて共有・活用すること、またはそのための技術・プロセスのことです。データ連携をする際には通常、データの形式を統一する必要があります。クラウドやビッグデータの利用が当たり前になった今、どのようにデータ連携を実現させ、集まったデータを有効活用させれば良いかが大きな課題になっています。
　データ連携」とは、異なるアプリケーションやシステムをまたいでデータを共有、活用するために、それぞれの言葉や解釈の垣根を取り払うプロセスです。
「データ受信→パース（解析）→変換→送信」の一連の行程を言い、データの送受信を行う際の通信手段として用いられるのが「HTTP、FTP、SMTP、SOAP」などの「転送プロトコル」です。

　・Daemon
　　UNIX系OSでメインメモリ上に常駐して特定の機能を提供するプログラム。利用者の操作とは無関係に処理を行うバックグラウンドプロセスの一種で、別のプログラムや機器、通信相手など外部からの要求を受け付けて処理を実行したり、あらかじめ設定されたタイミングで自律的に特定の処理を実行したりする。

　・CRON
　　多くのUNIX系OSで標準的に利用される常駐プログラム（デーモン）の一種で、利用者の設定したスケジュールに従って指定されたプログラムを定期的に起動してくれるもの。

　・バッチ
　　バッチ（Batch）は「ひと束」「一群」「1回分にまとめる」という意味で、バッチ処理はあらかじめ登録した一連の処理を自動的に実行する処理方式を指す。複数のプログラムやファイル転送コマンドなどの実行順序を定義し、大量のデータを一括処理する。処理の単位を「バッチ」と呼ぶ。

　・ログ
　　コンピュータの利用状況やデータ通信など履歴や情報の記録を取る事、またその記録を指す。操作やデータの送受信が行われた日時と、行われた操作の内容や送受信されたデータの中身などが記録される。

　・CSV
   テキスト（文字）データの形式の一つで、項目をカンマ「,」で区切って列挙したもの。 複数の項目をレコードとしてまとめる場合は、改行でレコードの区切りを表す。 標準のファイル拡張子は「.csv」。

　・TSV
　　文字や文字列の間にタブ記号を挿入して区切りを設けること、あるいは、そのようにして各データを区切って管理するファイル形式のことである。 TSVは、表計算やデータベースのデータをテキストファイルで保存する場合などに利用される。


・プルリクエスト（マージリクエスト）
　コードの変更をレビュワーに通知し、マージを依頼する機能です。 コードのレビューを受けることで、1人で作ると気がつかないコードの指摘やバグや記述ミスの発見ができ、コードの品質を高めます。



■ チケット管理ツール
・asana
　Facebookの共同創業者のダスティン・モスコヴィッツと元Googleエンジニアのジャスティン・ローゼンシュタインが立ち上げたタスク管理ツールです。
仕事の生産性を上げるために必要な機能が充実しています。白と黒を基調としたシンプルな作りが評判を呼び、さらにチュートリアルが充実していることからITツールを使い慣れていない人からも好まれるようになりました。


・Backlog
　ヌーラボが提供しているSaaS（Software as a Service）型のプロジェクト管理ツールである。国産のSaaS型プロジェクト管理ツールとしては老舗で、2006年に商用版の提供を開始している。


・Jooto
　2014年にシンガポール在住の日本人が立ち上げたクラウド型のタスク管理ツールです。Jootoをひと目見るだけで、いつもメンバー全員がプロジェクトの状況が分かることを目指して設計されています。
　ドラッグ・アンド・ドロップで操作できるシンプルなプロジェクト管理を実現。


・Readmine
　プロジェクト管理ができるオープンソースソフトウェアです。やるべき作業を記録・管理したり社内で情報共有ができます。例えば、チームでシステム開発を進める場合に誰がいつまでに何をやるのか、現在どのくらい進んでいるのかをRedmineに記録することで進捗状況を明らかにし計画通りに進むよう支援します。
　オープンソース(ソースコードが無償公開されている)のソフトウェアであるため、誰でも無料で利用できます。そのため、お金をかけずにプロジェクト管理ツールを使ってみたい方にはオススメです。
しかし、無料で利用できる反面、有償のパッケージのようなサポートはありません。そのため、RedmineはITの


・Trello
　カードを動かしながらタスクを視覚的に管理できるカンバン方式のツールです。壁面に付箋紙を貼るような感覚で、ドラック＆ドロップで直感的に操作が可能。わかり易いインターフェースと、多数の外部ツール（Slack、Github、Salesforceなど）と連携したプラットフォームの構築により、サービスが充実していること。また、無料での利用範囲の広さも魅力的なことから、使用を開始しました。


■ バージョン管理
・集中型
　存在する1つのリポジトリを全員で共有します。commitは共有リポジトリへの反映を意味します。Subversionは1つのリポジトリに対してCheckoutやcommitを行うので操作がシンプルです。
　中央集中型のデメリットとして，オフラインの状態では最新のファイルをリポジトリに取得・反映することができません．


・分散型
分散型システムは中央集中型と違って，主となるサーバは持っていません．その代わりに，だれもが独立したリポジトリを用意して，他のリポジトリと同期することができます．中央集中型ではリポジトリを用意できるのは1つのサーバだけでした．それに対し，分散型は複数のリポジトリを持つことができます．
なので，中央集中型ができないことを分散型では可能になります．リポジトリを複数存在することから「分散型」と呼ばれます．


・Github
　ソフトウェア開発プロジェクトのためのソースコード管理サービスです。
公開されているソースコードの閲覧や簡単なバグ管理機能、SNSの機能を備えており、開発者にとって無くてはならないサービスです。
また、GitHubを使ってバージョン管理を行っている企業も多数あります。


・Backlog
　ヌーラボが提供しているSaaS（Software as a Service）型のプロジェクト管理ツールである。国産のSaaS型プロジェクト管理ツールとしては老舗で、2006年に商用版の提供を開始している。


・SourceTree
　プログラムのソースコードを管理するGitを簡単に扱うためのツールだ。
　バージョン管理システムのGUIだ。しかも、GitとMercurialに対応している。それで、基本的な使い方を学べばバージョン管理システムは異なっても操作は同じになる。

・Tortoise SVN
　Subversion (SVN)のクライアントで、Windowsのシェルエクステンションとして機能します。Subversionのコマンドを実行する必要がなく、直観的に、簡単に使えます。バージョン管理をするためのツール。


・Git Flow
　Gitの機能であるブランチを活用したGitの開発手法でもあり、ツールの名前でもあります。
複数人による長期の開発をおこなう場合、運用ルールを決めずにGitを採用してしまうと、コンフリクトが頻繁に起こったりマージのミスが発生したりと、大変なことになるかもしれません……。しかし、そうした問題を回避し、最大限にGitを活用することができるのが「Git flow」です。

　・master
　　製品として出荷可能な状態であり、アプリケーションが安定して動く状態にする必要がある。

　・release
　　リリースブランチは develop ブランチから作成される。release/1.0といった感じで切ればいい。
この間に新機能に不具合が見つかった場合は、work/fix_bugなど修正用のブランチをここから切り、修正が終わったらこのブランチにmergeする。
デバッグが終わるまでdevelopにmergeすることは許されない。
developにmergeされたら、developをmasterにもmergeして安定版を確保する。

　・develop
　　次のリリースのための最新の開発作業の変更が反映されている状態。このブランチが常に最新。

　　・feature
　　　機能追加・改修などを行う作業ブランチ
developブランチから、featureブランチを切る
完了後はdevelopブランチにマージされて、featureブランチは削除される


■ FW／ライブラリ
・FW
　フレームワークとは、枠組み、骨組み、構造などを指す言葉で、ITの世界ではアプリケーションの土台として機能するソフトウェアのことをいう。 またフレームワークとは、具体的なソフトウェアだけでなく、汎用的に適用できるプログラムの設計モデルや典型的な処理パターンなどを含め、フレームワークと呼ぶこともある。

　・Spring Framework
　　Javaの開発環境で使用できるオープンソースのフレームワークです。企業やエンジニアによっては、縮めてSpring（スプリング）と呼ぶこともあります。Spring Frameworkの初版がリリースされたのは2004年ですが、令和の現在においてもバージョンアップが続けられており、その人気の高さが伺えます。
そもそもフレームワークとは、ソフトウェアやアプリケーション開発を行う際に必要となる機能や、基本的な骨組みをまとめたもので、プログラミング言語によって使用できる種類が異なるといった特徴があります。また、フレームワークごとに、アプリの開発を支援するWebアプリケーションフレームワーク、機能性や操作性の向上を目的としたユーティリティ系フレームワーク、という2つの区分に分かれ、搭載されている機能も様々です。
中でもSpring Frameworkは、Java言語のWebアプリケーションフレームワークに該当します。Javaを扱うエンジニアの間では、使用されることの多いフレームワークで、Spring Frameworkを使ってアプリケーションの開発を行う企業も少なくありません。

　・Struts
　　Javaを用いてWebアプリケーションを開発するためのフレームワークの一つ。Apacheソフトウェア財団（ASF）が開発を主催し、オープンソースソフトウェアとして公開している。
　　Java Servlet APIを拡張してMVC (Model、View、Controller)アーキテクチャを採用した、オープン・ソースのフレームワークです。

　・JSF（Java Server Faces）
　　JavaベースのWebアプリケーションフレームワークである。Javaの拡張機能セットであるJava Platform, Enterprise Edition (Java EE) の仕様の一つに採用されている。
　　入力フォームやwebアンケート等に向いている？

・ライブラリ
　ITの分野では、ある特定の機能を持ったコンピュータプログラムを他のプログラムから呼び出して利用できるように部品化し、そのようなプログラム部品を複数集めて一つのファイルに収納したものをライブラリという。
　汎用性の高い複数のプログラムを再利用可能な形でひとまとまりにしたものである。 ライブラリと呼ぶときは、それ単体ではプログラムとして動作させることはできない、つまり実行ファイルではない場合がある。 ライブラリは他のプログラムに何らかの機能を提供するコードの集まりと言える。

　・Bootstrap
　　Web制作者の作業を楽にする目的で作られた、Webサイト構築用のCSSひな形セットの名前です。JavaScriptでの動的調整も含まれており、実体としてはいくつかのCSSファイルとJavaScriptファイルです。

　・Flyway
　　オープンソースのデータベースマイグレーションツール。
　　複数人でのアプリケーション開発時のDBマイグレーション作業を素早く手軽に行うことができます。
MavenやAnt、APIやコマンドラインツール形式で提供されており、柔軟に対応することができます。

　・Jackson
　　JSON(JavaScript Object Notation ※)形式のデータを処理するための高速かつ軽量なJavaライブラリです。「Jackson Java JSON-processor」とも呼ばれています。
Jackson(ジャクソン)は、XML形式のデータを処理するためのJavaライブラリであるStAXやJAXBなどの実装を参考に開発されました。

　・jQuery
　　JavaScriptでできることを、より簡単な記法で実現できように設計されたJavaScriptライブラリです。2006年にリリースされ、JavaScriptライブラリのデファクトスタンダードであると言われています。

　・Junit
　　Javaで開発されたプログラムにおいてユニットテスト（単体テスト）の自動化を行うためのフレームワークである。

　・Log4j
　　Javaのロギングユーティリティ。元々はCeki Gülcüにより開発されていたが、現在はApacheソフトウェア財団のプロジェクトの一つとなっている。主にデバッグ用ツールとして使用されている。log4jは、Java logging frameworkの一つである。

　・Lombok
　　Java言語におけるボイラープレートコードをソースコードから排除するために使用するライブラリである。 ボイラープレートコードとは、言語仕様上省く事ができない定型的なコードの事である。 ボイラープレートコードは本質的なロジックでないため、アプリケーションを実装する上で冗長なコードとなる。

　・ORM
　　データベースとオブジェクト指向プログラミング言語の間の非互換なデータを変換するプログラミング技法である。オブジェクト関連マッピングとも呼ぶ。実際には、オブジェクト指向言語から使える「仮想」オブジェクトデータベースを構築する手法である。オブジェクト関係マッピングを行うソフトウェアパッケージは商用のものもフリーなものもあるが、場合によっては独自に開発することもある。



■ 連絡ツール
・ChatWork
　Chatwork株式会社が提供する、ビジネスコミュニケーションに特化したチャットツールです。
　Chatwork（チャットワーク）の強みはタスク管理機能

・Slack
　アメリカのSlack Technology社が開発し運営しているSaaS型のビジネスチャットツールです。元々はGlitchというゲームの映像配信サービスを開発スタッフたちが社内のコミュニケーション用に作ったツールでしたが、これを商用化したのがSlackです。
Slack Technology社は2019年に米株式市場に上場しており、日本からはソフトバンクグループなどが出資している注目の企業でもあります。


・IP Messenger
　白水啓章さんが作られた LAN 用メッセンジャーソフトです。
同じネットワーク内のメンバーを自動認識し、簡単にクライアント同士がリアルタイムに情報交換できる優れたソフトウェアです。


■ Java
・Javadoc
　「ドキュメントを作るのが面倒なので，プログラム中に特定のルールに従って付けたコメントを抽出してドキュメントを作っちゃう」考え方に沿って，Java言語のソースコードからドキュメントを生成する仕組みです．これにより，ドキュメントファイルを紛失することも無くなります．
　avaのソースコードを元に自動生成されたソースコードの説明書、もしくは、その説明書を作るコマンド（プログラム）


・アノテーション
　「注釈」という意味です。Javadocコメントは開発者に対してプログラムがどういうものかを説明するために使いましたが、これと同様に、コンパイラや実行環境に対してプログラムがどういうものかを伝えたいことがあります。
　Javaではアノテーションをプログラムに記述することにより、コンパイラで出力される警告メッセージを抑制したり、実行環境によってプログラムの動作を変更したりできます。


・メモリ管理
　コンピュータのメモリを管理するもの。単純化すれば、プログラムの要求に応じてメモリの一部を割り当てる方法と、そのメモリが不要となったときに再利用のために解放する方法を提供する。 今日では、CPUとオペレーティングシステムが協働して仮想記憶やメモリ保護を提供するのが一般的である。

　・ヒープ
　　データ構造とメモリ領域のヒープがある
　　データ構造の一種で、木構造（ツリー構造）のうち、親要素が子要素より常に大きい（あるいは小さい）という条件を満たすもの。また、コンピュータプログラムが利用するメモリ領域の種類の一つで、実行時に任意のタイミングで確保や解放が可能なものをヒープ領域というが、これをヒープと略す場合がある。
　　コンピュータプログラムが実行時に使用するメモリ領域の一つで、任意に確保や解放を繰り返すことができるものをヒープ領域、あるいはヒープメモリ（heap memory）という。これを指して単にヒープと略すことも多く、データ構造のヒープと混同しないよう文脈に注意する必要がある。

　・GC
　　GCとはプログラムが確保したメモリ領域のうち、
不要かどうか自動で管理し、不要になったものだけを解放してくれる機能のことです。
そのためプログラマがメモリ管理のためのコードを書かなくてもよくなり、 
不要なメモリを解放し忘れるということが起こらなくなります。


・GoF
　書籍『オブジェクト指向における再利用のためのデザインパターン』(原題:Design Patterns: Elements of Reusable Object-Oriented Software) の著者である、エーリヒ・ガンマ、リチャード・ヘルム、ラルフ・ジョンソン、ジョン・ブリシディースの4人を指す。
GoFによるデザインパターン（GoFパターン）は、多数のソフトウェアパターンの中で最も広く知られているものである。


・デザインパターン
　過去のソフトウェア設計者が発見し編み出した設計ノウハウを蓄積し、名前をつけ、再利用しやすいように特定の規約に従ってカタログ化したものである。
　デザインパターンとは、JavaやRubyなどのオブジェクト指向の言語で使われる設計パターンのことです。過去のエンジニアが解決してきた方法（設計）が、デザインパターンとしてまとめられているのです。
デザインパターンと言ってもいろいろとあるのですが、最も有名なのはGoF（Gnag of Four）でしょう。「生成」や「構造」、「振る舞い」の3つに分類された、23のパターンがあります。
デザインパターンは体系だっているので、ビギナークラスのエンジニアがオブジェクト指向を学ぶ題材としても役に立つことでしょう。


■ その他
・オブジェクト指向
　互いに密接な関連性を持つデータとメソッドをひとつにまとめてオブジェクトとし、それぞれ異なる性質と役割を持たせたオブジェクトの様々な定義と、それらオブジェクトを相互に作用させる様々なプロセスの設定を通して、プログラム全体を構築するソフトウェア開発手法である。


・バッチ処理
　バッチ処理とは、複数のプログラムからなる作業において、あらかじめ一連の手順を登録しておき、まとめて連続的に実行する方式。または、一定期間や一定量ごとにデータをまとめて一括して処理する方式。


・コンパイル
　コンパイルとは、プログラミング言語で書かれた文字列（ソースコード）を、コンピュータ上で実行可能な形式（オブジェクトコード）に変換することです。
コンパイルを行うソフトウェアをコンパイラといい、変換されるプログラミング言語をコンパイラ型言語と呼びます。


・カバレッジ
　カバレッジ（網羅率）は、モノや範囲に対して全体の内どれくらいをカバーいているかを表すための指標。


・プラットホーム
　「プラットフォーム（platform）」こと。用語の中身としては動かすための土台となる環境のこと
です。
